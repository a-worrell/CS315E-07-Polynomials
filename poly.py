"""
Student information for this assignment:

Replace <FULL NAME> with your name.
On my honor, Audrey Worrell, this
programming assignment is my own work and I have not provided this code to
any other student.

I have read and understand the course syllabus's guidelines regarding Academic
Integrity. I understand that if I violate the Academic Integrity policy (e.g.
copy code from someone else, have the code generated by an LLM, or give my
code to someone else), the case shall be submitted to the Office of the Dean of
Students. Academic penalties up to and including an F in the course are likely.

UT EID 1: ACW3428
UT EID 2:
"""


class Node:
    """
    A modified version of the Node class for linked lists (using proper class
    coding practices). Instead of a data instance variable, this node class has both
    a coefficient and an exponent instance variable, which is used to represent each
    term in a polynomial.
    """

    def __init__(self, coeff, exp, link=None):
        """
        Node Constructor for polynomial linked lists.

        Args:
        - coeff: The coefficient of the term.
        - exp: The exponent of the term.
        - link: The next node in the linked list.
        """
        self.coeff = coeff
        self.exp = exp
        self.next = link

    @property
    def coeff(self):
        """
        Getter method for the coefficient attribute.
        """
        return self.__coeff

    @coeff.setter
    def coeff(self, value):
        """
        Setter method for the coefficient attribute.
        """
        if value is None or isinstance(value, int):
            self.__coeff = value
        else:
            raise ValueError("Coefficient must be an integer or None.")

    @property
    def exp(self):
        """
        Getter method for the exponent attribute.
        """
        return self.__exp

    @exp.setter
    def exp(self, value):
        """
        Setter method for the exponent attribute.
        """
        if value is None or isinstance(value, int):
            self.__exp = value
        else:
            raise ValueError("Exponent must be an integer or None.")

    @property
    def next(self):
        """
        Getter method for the next attribute.
        """
        return self.__next

    @next.setter
    def next(self, value):
        """
        Setter method for the next attribute.
        """
        if value is None or isinstance(value, Node):
            self.__next = value
        else:
            raise ValueError("Next must be a Node instance or None.")

    def __str__(self):
        """
        String representation of each term in a polynomial linked list.
        """
        return f"({self.coeff}, {self.exp})"


class LinkedList:
    def __init__(self):
        # You are also welcome to use a sentinel/dummy node!
        # It is definitely recommended, which will we learn more
        # about in class on Monday 10/21. If you choose to use
        # a dummy node, you can comment out the self.head = None
        # and comment in the below line. We use None to make sure
        # if there is an error where you accidentally include the
        # dummy node in your calculation, it will throw an error.
        # self.dummy = Node(None, None)
        self.head = None

    # Insert the term with the coefficient coeff and exponent exp into the polynomial.
    # If a term with that exponent already exists, add the coefficients together.
    # You must keep the terms in descending order by exponent.
    def insert_term(self, coeff, exp):
        if coeff == 0:
            return

        new_node = Node(coeff, exp)

        if self.head is None or self.head.exp < exp:
            new_node.next = self.head
            self.head = new_node
            return

        current = self.head
        prev = None
        while current is not None:
            if current.exp == exp:
                current.coeff += coeff
                if current.coeff == 0:
                    if prev:
                        prev.next = current.next
                    else:
                        self.head = current.next
                return

            elif current.exp < exp:
                new_node.next = current
                if prev:
                    prev.next = new_node
                else:
                    self.head = new_node
                return

            prev = current
            current = current.next

        prev.next = new_node

    # Add a polynomial p to the polynomial and return the resulting polynomial as a new linked list.
    def add(self, p):
        result = LinkedList()
        node1, node2 = self.head, p.head

        while node1 is not None or node2 is not None:
            if node1 is not None and (node2 is None or node1.exp > node2.exp):
                result.insert_term(node1.coeff, node1.exp)
                node1 = node1.next
            elif node2 is not None and (node1 is None or node2.exp > node1.exp):
                result.insert_term(node2.coeff, node2.exp)
                node2 = node2.next
            else:
                combined_coeff = node1.coeff + node2.coeff
                result.insert_term(combined_coeff, node1.exp)
                node1, node2 = node1.next, node2.next

        return result

    # Multiply a polynomial p with the polynomial and return the product as a new linked list.
    def mult(self, p):
        result = LinkedList()
        node1 = self.head

        while node1 is not None:
            temp_result = LinkedList()
            node2 = p.head

            while node2 is not None:
                new_coeff = node1.coeff * node2.coeff
                new_exp = node1.exp + node2.exp
                temp_result.insert_term(new_coeff, new_exp)
                node2 = node2.next

            result = result.add(temp_result)
            node1 = node1.next

        return result

    # Return a string representation of the polynomial.
    def __str__(self):
        terms = []
        current = self.head

        while current is not None:
            if current.coeff != 0:
                terms.append(f"({current.coeff}, {current.exp})")
            current = current.next

        return " + ".join(terms)


def main():
    # read data from stdin using input() and create polynomial p
    # read data from stdin using input() and create polynomial q
    # get sum of p and q as a new linked list and print sum
    # get product of p and q as a new linked list and print product
    p = LinkedList()
    n = int(input().strip())
    for _ in range(n):
        coeff, exp = map(int, input().strip().split())
        p.insert_term(coeff, exp)

    input()

    q = LinkedList()
    m = int(input().strip())
    for _ in range(m):
        coeff, exp = map(int, input().strip().split())
        q.insert_term(coeff, exp)

    sum_poly = p.add(q)
    product_poly = p.mult(q)

    print(sum_poly)
    print(product_poly)


if __name__ == "__main__":
    main()
